{"version":3,"sources":["store/Slices/servicesFetchSlice.js","store/Slices/serviceFetchSlice.js","store/Slices/serviceEditSlice.js","store/index.js","components/ErrorComponent/ErrorComponent.jsx","components/MainPage/ServiceItem/ServiceItem.jsx","components/MainPage/ServiceList/ServiceList.jsx","components/MainPage/MainPage.jsx","components/EditServicePage/Form.jsx","components/EditServicePage/EditServicePage.jsx","App.js","reportWebVitals.js","index.js"],"names":["fetchServices","createAsyncThunk","dispatch","a","fetchServicesRequest","fetch","process","method","headers","response","ok","fetchServicesFailure","statusText","json","data","fetchServicesSuccess","message","servicesFetchReducer","createSlice","name","initialState","items","loading","error","reducers","state","action","payload","actions","serviceFetch","props","fetchServiceRequest","serviceId","fetchServiceFailure","fetchServiceSuccess","serviceFetchReducer","item","price","description","content","editService","editServiceRequest","body","JSON","stringify","editObj","editServicesFailure","editServiceSuccess","editServiceClear","serviceEditReducer","success","load","err","rootReducer","combineReducers","servicesFetch","store","configureStore","reducer","ErrorComponent","className","ServiceItem","useState","setState","useDispatch","handleRemove","id","to","onClick","type","color","height","width","ServiceList","useSelector","useEffect","map","MainPage","Form","handleInputChange","e","preventDefault","target","value","handleSubmit","onSubmit","htmlFor","onChange","required","EditServicePage","Number","match","params","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fad56185.chunk.js","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\n\nexport const fetchServices = createAsyncThunk(\n    'fetch/servicesFetch',\n async (dispatch) => {\n    dispatch(fetchServicesRequest());\n     try {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}`, {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'}\n        });\n        if (!response.ok) {\n            dispatch(fetchServicesFailure(response.statusText));\n        }\n        const data = await response.json();\n        dispatch(fetchServicesSuccess(data));\n    } catch (e) {\n        dispatch(fetchServicesFailure(e.message));\n    }\n});\n\n\nconst initialState = {\n    items: [], loading: false, error: null\n};\n\nexport const servicesFetchReducer = createSlice({\n    name: 'servicesFetch',\n    initialState,\n    reducers: {\n        fetchServicesRequest(state) {\n            state.loading = true;\n        },\n        fetchServicesFailure(state, action) {\n            state.error = action.payload.error;\n            state.loading = false;\n        },\n        fetchServicesSuccess(state, action) {\n            state.items = action.payload;\n            state.loading = false;\n        },\n    },\n});\n\nexport const {fetchServicesRequest, fetchServicesFailure, fetchServicesSuccess} = servicesFetchReducer.actions;\n\nexport default servicesFetchReducer.reducer;","import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\n\nexport const serviceFetch = createAsyncThunk(\n    'fetch/serviceFetch',\n    async (props) => {\n        const dispatch = props.dispatch;\n        dispatch(fetchServiceRequest());\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/${props.serviceId}`, {\n                method: 'GET',\n                headers: {'Content-Type': 'application/json'}\n            });\n            if (!response.ok) {\n                dispatch(fetchServiceFailure(response.statusText));\n            }\n            const data = await response.json();\n            dispatch(fetchServiceSuccess(data));\n        } catch (e) {\n            dispatch(fetchServiceFailure(e.message));\n        }\n    }\n);\n\nconst initialState = {\n    item: {name: '', price: '', description: ''},\n    loading: false,\n    error: null,\n};\n\nexport const serviceFetchReducer = createSlice(\n    {\n        name: 'fetchService',\n        initialState,\n        reducers: {\n            fetchServiceRequest(state) {\n                state.loading = true;\n            },\n            fetchServicesFailure(state, action) {\n                state.error = action.payload;\n                state.loading = false;\n            },\n            fetchServiceSuccess(state, action) {\n                state.item.name = action.payload.name;\n                state.item.price = action.payload.price;\n                state.item.description = action.payload.content;\n                state.loading = false;\n            }\n        }\n    }\n);\n\n\nexport const {fetchServiceRequest, fetchServiceFailure, fetchServiceSuccess} = serviceFetchReducer.actions;\nexport default serviceFetchReducer.reducer;","import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\n\nexport const editService = createAsyncThunk(\n    'fetch/editService',\n    async (props) => {\n        const dispatch = props.dispatch;\n        dispatch(editServiceRequest());\n        try {\n            const response = await fetch(process.env.REACT_APP_API_URL, {method: 'POST', headers: {'Content-Type': 'application/json'}, body: JSON.stringify(props.editObj)});\n            if (!response.ok) {\n                dispatch(editServicesFailure(response.statusText));\n            }\n            dispatch(editServiceSuccess());\n            dispatch(editServiceClear());\n        } catch(e) {\n            dispatch(editServicesFailure(e.message));\n        }\n    }\n);\n\nconst initialState = {success: false, load: false, err: null};\n\nexport const serviceEditReducer = createSlice(\n    {\n        name: 'serviceEdit',\n        initialState,\n        reducers: {\n            editServiceRequest(state) {\n                state.load = true;\n            },\n            editServicesFailure(state, action) {\n                state.err = action.payload;\n                state.load = false;\n            },\n            editServiceSuccess(state) {\n                state.success = true;\n                state.load = false;\n            },\n            editServiceClear(state) {\n                state.success = false;\n            }\n        }\n    }\n);\n\nexport const {editServiceRequest, editServicesFailure, editServiceSuccess, editServiceClear} = serviceEditReducer.actions;\nexport default serviceEditReducer.reducer;\n","import {combineReducers, configureStore} from '@reduxjs/toolkit';\nimport servicesFetchReducer from \"./Slices/servicesFetchSlice\";\nimport serviceFetchReducer from \"./Slices/serviceFetchSlice\";\nimport editService from \"./Slices/serviceEditSlice\";\nconst rootReducer = combineReducers({servicesFetch: servicesFetchReducer, serviceFetch: serviceFetchReducer, editService: editService});\n\nexport const store = configureStore({\n    reducer: rootReducer,\n});","import React from \"react\";\n\nexport function ErrorComponent () {\n    return(\n        <p className={'ErrorComponent'}>Произошла ошибка</p>\n    )\n}","import React, {useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\nimport {useDispatch} from \"react-redux\";\nimport {ErrorComponent} from \"../../ErrorComponent/ErrorComponent\";\nimport {fetchServices} from \"../../../store/Slices/servicesFetchSlice\";\n\nexport function ServiceItem (props) {\n    const initialState = {loading: false, error: null};\n    const [state, setState] = useState(initialState);\n    const dispatch = useDispatch();\n\n    const handleRemove = async (id) => {\n        setState({...state, loading: true});\n        try {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/${id}`, {method: 'DELETE', headers: {'Content-Type': 'application/json'}});\n            if (!response.ok) {\n                setState({...state, loading: false, error: response.statusText});\n            }\n            setState(initialState);\n            dispatch(fetchServices(dispatch));\n        } catch(e) {\n            setState({...state, loading: false, error: e.message});\n        }\n    }\n\n    return(\n        <li key={props.id} className={'ServiceItem'}>\n            {state.error && <ErrorComponent />}\n            <div className={'ServiceWrapperValue'}>\n                <span className={'ServiceValue'}>{props.name}</span>\n                <span className={'ServiceValue'}>{props.price} ₽</span>\n            </div>\n            <div className={'ServiceListWrapperButtons'}>\n                <Link className={'ServiceButton'} to={`/services/edit/${props.id}`}>✎</Link>\n                <button className={'ServiceButton'} onClick={() => handleRemove(props.id)}>\n                    {state.loading && <Loader type=\"TailSpin\" color=\"white\" height={12} width={12} />}\n                    {!state.loading && '✕'}\n                </button>\n            </div>\n        </li>\n    )\n}","import React, {useEffect} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport {ServiceItem} from \"../ServiceItem/ServiceItem\";\nimport {ErrorComponent} from \"../../ErrorComponent/ErrorComponent\";\nimport {fetchServices} from \"../../../store/Slices/servicesFetchSlice\";\n\nexport function ServiceList() {\n    const items = useSelector((state) => state.servicesFetch);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchServices(dispatch));\n    }, [dispatch]);\n\n    return (\n        <ul className={'ServiceList'}>\n            {items.error && <ErrorComponent />}\n            {items.loading && <Loader type=\"TailSpin\" color=\"#db3948\" height={50} width={50}/>}\n            {!items.loading && items.items.map((item) => <ServiceItem key={item.id} {...item} />)}\n        </ul>\n    )\n}","import React from 'react';\nimport {ServiceList} from './ServiceList/ServiceList';\n\nexport function MainPage() {\n    return(\n        <div className={'ServicesPage'}>\n            <ServiceList />\n        </div>\n    )\n}\n","import React, {useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Loader from \"react-loader-spinner\";\nimport {ErrorComponent} from \"../ErrorComponent/ErrorComponent\";\nimport {editService} from \"../../store/Slices/serviceEditSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect} from \"react-router\";\n\nexport function Form (props) {\n    const {success, load, err} = useSelector((state) => state.editService);\n    const [state, setState] = useState({name: props.name, price: props.price, description: props.description});\n    const dispatch = useDispatch();\n    const handleInputChange = (e) => {\n        e.preventDefault();\n        setState({...state, [e.target.name]: e.target.value});\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const editObj = {id: props.serviceId, name: state.name, price: state.price, content: state.description};\n        dispatch(editService({dispatch, editObj}));\n    }\n\n    return(\n        <form className={'EditServiceForm'} onSubmit={handleSubmit}>\n            {success && <Redirect to={'/services'}/>}\n            <label htmlFor={'NameService'}>Название</label>\n            <input id={'NameService'} type={'text'} className={'NameService'} name={'name'} value={state.name}\n                   onChange={handleInputChange} required={true}/>\n            <label htmlFor={'PriceService'}>Цена</label>\n            <input id={'PriceService'} type={'text'} className={'PriceService'} name={'price'} value={state.price}\n                   onChange={handleInputChange} required={true}/>\n            <label htmlFor={'DescriptionService'}>Описание</label>\n            <input id={'DescriptionService'} type={'text'} className={'DescriptionService'} name={'description'}\n                   value={state.description} onChange={handleInputChange} required={true}/>\n            <div className={'ButtonsBlock'}>\n                <Link to={'/services'} className={'CancelButton'}>Отмена</Link>\n                <button type={'submit'} className={'ChangeButton'}>\n                    {\n                        (\n                            load &&\n                            <Loader type=\"TailSpin\" color=\"white\" height={15} width={15}/>\n                        ) || (!load && 'Изменить')\n                    }\n                </button>\n                {err && <ErrorComponent />}\n            </div>\n        </form>\n    )\n}","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport {ErrorComponent} from \"../ErrorComponent/ErrorComponent\";\nimport {serviceFetch} from \"../../store/Slices/serviceFetchSlice\";\nimport {Form} from \"./Form\";\n\nexport function EditServicePage(props) {\n    const serviceId = Number(props.match.params.id);\n    const {item, loading, error} = useSelector((state) => state.serviceFetch);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(serviceFetch({dispatch, serviceId}));\n    }, [dispatch, serviceId]);\n\n\n    return (\n        <div className={'EditServicePage'}>\n            {loading && <Loader type=\"TailSpin\" color=\"#db3948\" height={50} width={50}/>}\n            {error && <ErrorComponent />}\n            {((item.name, item.price, item.description) && !loading) &&\n            <Form\n                serviceId={serviceId}\n                name={item.name}\n                price={item.price}\n                description={item.description}\n            />}\n        </div>\n    )\n}\n","import './App.css';\nimport {store} from './store';\nimport {Provider} from 'react-redux';\nimport {MainPage} from './components/MainPage/MainPage';\nimport {EditServicePage} from './components/EditServicePage/EditServicePage';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport {Redirect} from 'react-router';\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router basename={'ra-11.1'}>\n                <div className=\"App\">\n                    <Switch>\n                        <Route exact={true} path={'/services'} component={MainPage}/>\n                        <Route path={'/services/edit/:id'} component={(props) => <EditServicePage {...props}/>}/>\n                        <Redirect to={'/services'}/>\n                    </Switch>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}